import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.stream.IntStream;

public class Bbike1 {

	
	
	String name;
	String color;
	Bbike1(String n,String c)
	{
		
		this.name=n;
		this.color=c;
	}
	public static void main(String[] args) {
		
	
	Bbike1  b=new Bbike1("nahesg","bagasqnsbbh");
	Bbike1  b2=new Bbike1("s","ba");
	Bbike1  b3=new Bbike1("na","bar");
	
	Object y[]= {b,b2,b3};
	
	}
	
	
}
class car{

String name;
String color;
car(String n,String c)
{
	
	this.name=n;
	this.color=c;
}
public static void main(String[] args) {
	car c=new car("nahesg","bagasqnsbbh");
	car  c2=new car("s","ba");
	car  c3=new car("na","bar");
	

			
		
	
	
Object r[]= {c,c2,c3};



for (int i=0;i<=r.length;i++)
{
	
	System.out.println(r[i]+" "+r[i]);
}	


for (int i=0;i<=r.length;i++)
{
	
	System.out.println(r[i]+" "+r[i]);
}	





}
public char charAt(int arg0) {
	return color.charAt(arg0);
}
public default IntStream chars() {
	return color.chars();
}
public int codePointAt(int arg0) {
	return color.codePointAt(arg0);
}
public int codePointBefore(int arg0) {
	return color.codePointBefore(arg0);
}
public int codePointCount(int arg0, int arg1) {
	return color.codePointCount(arg0, arg1);
}
public default IntStream codePoints() {
	return color.codePoints();
}
public int compareTo(String arg0) {
	return color.compareTo(arg0);
}
public int compareToIgnoreCase(String arg0) {
	return color.compareToIgnoreCase(arg0);
}
public String concat(String arg0) {
	return color.concat(arg0);
}
public boolean contains(CharSequence arg0) {
	return color.contains(arg0);
}
public boolean contentEquals(CharSequence arg0) {
	return color.contentEquals(arg0);
}
public boolean contentEquals(StringBuffer arg0) {
	return color.contentEquals(arg0);
}
public boolean endsWith(String arg0) {
	return color.endsWith(arg0);
}
public boolean equals(Object arg0) {
	return color.equals(arg0);
}
public boolean equalsIgnoreCase(String arg0) {
	return color.equalsIgnoreCase(arg0);
}
public byte[] getBytes() {
	return color.getBytes();
}
public byte[] getBytes(Charset arg0) {
	return color.getBytes(arg0);
}
public void getBytes(int arg0, int arg1, byte[] arg2, int arg3) {
	color.getBytes(arg0, arg1, arg2, arg3);
}
public byte[] getBytes(String arg0) throws UnsupportedEncodingException {
	return color.getBytes(arg0);
}
public void getChars(int arg0, int arg1, char[] arg2, int arg3) {
	color.getChars(arg0, arg1, arg2, arg3);
}
public int hashCode() {
	return color.hashCode();
}
public int indexOf(int arg0, int arg1) {
	return color.indexOf(arg0, arg1);
}
public int indexOf(int arg0) {
	return color.indexOf(arg0);
}
public int indexOf(String arg0, int arg1) {
	return color.indexOf(arg0, arg1);
}
public int indexOf(String arg0) {
	return color.indexOf(arg0);
}
public String intern() {
	return color.intern();
}
public boolean isEmpty() {
	return color.isEmpty();
}
public int lastIndexOf(int arg0, int arg1) {
	return color.lastIndexOf(arg0, arg1);
}
public int lastIndexOf(int arg0) {
	return color.lastIndexOf(arg0);
}
public int lastIndexOf(String arg0, int arg1) {
	return color.lastIndexOf(arg0, arg1);
}
public int lastIndexOf(String arg0) {
	return color.lastIndexOf(arg0);
}
public int length() {
	return color.length();
}
public boolean matches(String arg0) {
	return color.matches(arg0);
}
public int offsetByCodePoints(int arg0, int arg1) {
	return color.offsetByCodePoints(arg0, arg1);
}
public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4) {
	return color.regionMatches(arg0, arg1, arg2, arg3, arg4);
}
public boolean regionMatches(int arg0, String arg1, int arg2, int arg3) {
	return color.regionMatches(arg0, arg1, arg2, arg3);
}
public String replace(char arg0, char arg1) {
	return color.replace(arg0, arg1);
}
public String replace(CharSequence arg0, CharSequence arg1) {
	return color.replace(arg0, arg1);
}
public String replaceAll(String arg0, String arg1) {
	return color.replaceAll(arg0, arg1);
}
public String replaceFirst(String arg0, String arg1) {
	return color.replaceFirst(arg0, arg1);
}
public String[] split(String arg0, int arg1) {
	return color.split(arg0, arg1);
}
public String[] split(String arg0) {
	return color.split(arg0);
}
public boolean startsWith(String arg0, int arg1) {
	return color.startsWith(arg0, arg1);
}
public boolean startsWith(String arg0) {
	return color.startsWith(arg0);
}
public CharSequence subSequence(int arg0, int arg1) {
	return color.subSequence(arg0, arg1);
}
public String substring(int arg0, int arg1) {
	return color.substring(arg0, arg1);
}
public String substring(int arg0) {
	return color.substring(arg0);
}
public char[] toCharArray() {
	return color.toCharArray();
}
public String toLowerCase() {
	return color.toLowerCase();
}
public String toLowerCase(Locale arg0) {
	return color.toLowerCase(arg0);
}
public String toString() {
	return color.toString();
}
public String toUpperCase() {
	return color.toUpperCase();
}
public String toUpperCase(Locale arg0) {
	return color.toUpperCase(arg0);
}
public String trim() {
	return color.trim();
}







}